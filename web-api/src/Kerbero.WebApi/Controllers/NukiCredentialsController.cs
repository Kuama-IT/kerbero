using Kerbero.Domain.NukiCredentials.Dtos;
using Kerbero.Domain.NukiCredentials.Interfaces;
using Kerbero.WebApi.Dto;
using Kerbero.WebApi.Extensions;
using Kerbero.WebApi.Mappers;
using Kerbero.WebApi.Models.Requests;
using Kerbero.WebApi.Utils.Extensions;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace Kerbero.WebApi.Controllers;

[ApiController]
[Authorize]
[Route("api/[controller]")]
public class NukiCredentialsController : ControllerBase
{
  private readonly ICreateNukiCredentialInteractor _createNukiCredential;
  private readonly ICreateNukiCredentialDraftInteractor _createNukiCredentialDraft;
  private readonly IConfirmNukiDraftCredentialsInteractor _confirmNukiDraftCredentialsInteractor;
  private readonly IConfiguration _configuration;

  public NukiCredentialsController(
    ICreateNukiCredentialInteractor createNukiCredential,
    ICreateNukiCredentialDraftInteractor createNukiCredentialDraft,
    IConfiguration configuration,
    IConfirmNukiDraftCredentialsInteractor confirmNukiDraftCredentialsInteractor)
  {
    _createNukiCredential = createNukiCredential;
    _createNukiCredentialDraft = createNukiCredentialDraft;
    _configuration = configuration;
    _confirmNukiDraftCredentialsInteractor = confirmNukiDraftCredentialsInteractor;
  }

  /// <summary>
  /// Prepares Nuki Credential draft for current user and returns where to redirect the user to continue with the create
  /// Nuki Account procedure
  /// </summary>
  [HttpPost("draft")]
  public async Task<ActionResult<NukiCredentialDraftDto>> CreateDraft()
    // TODO move to body payload (create type)
  {
    var userId = HttpContext.GetAuthenticatedUserId();

    var interactorResponse =
      await _createNukiCredentialDraft.Handle(userId);

    if (interactorResponse.IsFailed)
    {
      var error = interactorResponse.Errors.First();
      return ModelState.AddErrorAndReturnAction(error);
    }

    return NukiCredentialMapper.Map(interactorResponse.Value);
  }

  /// <summary>
  /// This endpoint is called from Nuki Apis with a valid OAuth2 code after the user grants US access to his Nuki Account
  /// </summary>
  /// <param name="identifier">identifier generated by the <see cref="ICreateNukiCredentialDraftInteractor"/></param>
  /// <param name="code">Returned by nuki to let us ask for a token</param>
  /// <returns></returns>
  [AllowAnonymous]
  [HttpGet("confirm-draft-hook/{identifier}")]
  public async Task<ActionResult<NukiCredentialDto>> ConfirmDraft(Guid identifier, string code)
  {
    var interactorResponse = await _confirmNukiDraftCredentialsInteractor.Handle(
      code,
      identifier
    );

    var redirectUrl = _configuration["WEB_APP_URL"] + "?nuki-credential-registered=";

    if (interactorResponse.IsFailed)
    {
      return RedirectPermanent(redirectUrl + "false");
    }

    return RedirectPermanent(redirectUrl + "true");
  }

  /// <summary>
  /// This endpoint is called from Nuki Apis with a valid OAuth2 code after the user grants US access to his Nuki Account
  /// </summary>
  /// <param name="request"></param>
  /// <returns></returns>
  [HttpPost]
  public async Task<ActionResult<NukiCredentialDto>> CreateNukiCredentialsWithToken(
    CreateNukiCredentialRequest request)
  {
    var interactorResponse = await _createNukiCredential.Handle(
      userId: HttpContext.GetAuthenticatedUserId(),
      token: request.Token
    );

    if (interactorResponse.IsFailed)
    {
      var error = interactorResponse.Errors.First();
      return ModelState.AddErrorAndReturnAction(error);
    }

    return interactorResponse.Value;
  }
}